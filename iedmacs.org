#+title: GNU IEDmacs configuration
#+author: AreTaro
#+language: fr
#+options: ':t toc:nil num:t author:t
#+startup: content indent
#+macro: latest-export-date (eval (format-time-string "%F %T %z"))
#+macro: word-count (eval (count-words (point-min) (point-max)))


#+begin_src emacs-lisp
 __   _______  _______  .___  ___.      ___       ______     _______.
|  | |   ____||       \ |   \/   |     /   \     /      |   /       |
|  | |  |__   |  .--.  ||  \  /  |    /  ^  \   |  ,----'  |   (----`
|  | |   __|  |  |  |  ||  |\/|  |   /  /_\  \  |  |        \   \    
|  | |  |____ |  '--'  ||  |  |  |  /  _____  \ |  `----.----)   |   
|__| |_______||_______/ |__|  |__| /__/     \__\ \______|_______/    
                                                                     
#+end_src

Ceci est une Version aménagée d'Emacs pour les étudiants de l'IED8 Paris
qui le souhaitent, nommée pour l'occasion IEDmacs.

Emacs n'est peut-être pas toujours facile à prendre
en main, et certainement pas le meilleur IDE puisqu'il est loin de faire
l'unanimité, mais j'ai personnellement essayé de l'abandonner
plusieurs fois, mais à chaque fois j'y suis revenu, alors j'ai pensé
que je devais faire quelque chose pour celles et ceux qui voudrait s'y
essayer.

Ce document est une tentative d'explication du code du fichier
"init.el" qui permet de personnaliser Emacs. L'objectif est d'avoir un
version d'Emacs plus facile à prendre en main afin de rendre avec un
peu moins de difficultés les premiers devoirs (mais ça marchera aussi
pour les suivants). Ce document reprend le concept de "[[https://fr.wikipedia.org/wiki/Programmation_lettr%C3%A9e][Progammation
lettrée]]" ("Literate Programming" en anglais) qui consiste à intégrer les explications directement au sein
du code.

Emacs et Orgmode permettent de générer un fichier de code à partir
d'un fichier ~.org~ en ne conservant que les parties de code indiquées
entre des balises dans le fichier. Ainsi, le fichier "init.el"
disponible dans le dépôt est généré automatiquement à partir de ce fichier
en utilisant le raccourci ~Ctrl-c Ctrl-v Ctrl-t~.

Ce fichier est composé de plusieurs parties comme suit:
- Définitions: Lexique de certains mots ou acronymes utilisés.
- Documentation Utilisateur: Information pour l'installation et
  l'utilisation.
- Documentation Système: Description et explication du fichier
  "init.el"
- Recommandations: Informations et bonnes pratiques pour la rédaction
  et le maintient de ce dépôt.
  
* Definitions
** Integrate Development Environment (IDE)
   C'est un environnement de développement logiciel qui regroupe
   divers outils pour faciliter l'écriture, la compilation, le
   débogage et le déploiement de programmes informatiques.

* Documentation Utilisateur
** Guide d'installation
Installation et configuration d'IEDmacs.
1. Installer Emacs
    ~sudo apt-get install emacs~
2. Installer LaTex
    ~sudo apt-get install texlive-full~
3. Télécharger les fichiers de l'IEDmacs
   #+begin_src shell
   for file in init.el demarrageIed8 ied-latex-standard.org iedmacs.org; do curl -o ~/.emacs.d/$file https://raw.githubusercontent.com/AreTaro/iedmacs/main/$file; done
   #+end_src

   Il y a quatres fichiers:
   - *init.el:* c'est le fichier lu à l'ouverture par emacs avec
     quelques packages utiles préinstallé.
   - *demarrageIed8:* c'est la page d'accueil d'IEDmacs avec quelques
     instructions et raccourcis utiles.
   - *ied-latex-standard.org:* c'est le fichier qui permet la
     configuration pour convertir votre fichier en LaTex.
   - *iedmacs.org:* c'est le fichier qui fait office de manuel et qui
     permet de générer le fichier "init.el" de l'IEDmacs.
     
   Ceci est juste une version simplifiée d'Emacs avec quelques
   packages utiles préinstallés. Pour plus de détails, voir le
   chapitre "Documentation Système". Libre à vous de choisir un autre
   répertoire pour les fichiers mais il faudra modifier leur chemin
   d'accès dans le fichier "init".
** Guide du débutant / Tutoriel
Explications simples pour commencer à utiliser IDEmacs et exemples
concrets d'utilisation.
*** Lancer IEDmacs
Pour lancer IEDmacs utiliser la commande ~emacs &~, ou faites le
directement en cliquant sur l'icône emacs qui se sera créé après
l'installation.
*** Les Commandes de base
Il est généralement recommandé de commencer par le tutoriel
d'utilisation d'Emacs (~Ctrl-h t~) pour apprendre les nombreux
raccourcis. Mais certaines commandes seront peut-être nécessaire pour
tester et essayer rapidement IDEmacs, d'autant plus que vous serez
peut-être déjà en retard dans le rendu de vos devoirs et qu'il est
possible que vous remettiez le tutoriel à plus tard. Dans ce cas voici
quelques commandes essentiels:
- ~Ctrl-f~, ~Ctrl-b~, ~Ctrl~p~, ~Ctrl~n~: pour avancer, reculer,
    monter, descendre le curseur respectivement.
- ~Ctrl-g~ pour sortir d'un menu ou d'une commande. Souvent utile car
  dans emacs, la touche "Esc" ne permet pas toujours de s'échapper
  d'un menu.
- ~Ctrl-x Ctrl-c~ pour quitter
- ~Ctrl-x f~ pour ouvrir un fichier
- ~Ctrl-x b~ pour basculer d'une fichier ouvert (buffer) à l'autre.
Pour la liste complète, aller voir sur la [[https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf][carte de référence]].
*** Rédiger un devoir
1. Ouvrir un fichier pour le devoir
   Il y a au moins deux méthodes. La première consiste à ouvrir un
   fichier vierge et à y insérer le code nécessaire pour l'export
   LaTex en PDF. La seconde consiste à télécharger un fichier
   échantillon à le code déjà ajouté.

   *Méthode 1*

   - Utiliser la commande ~Ctrl-x Ctrl-f~ comme pour ouvrir un fichier,

   - Sélectionner le dossier où enregistrer le fichier,

   - Nommer le fichier et presser entrer. Cela ouvrira un nouveau buffer ou fichier vierge,

   - Copier le code ci-dessous, en remplaçant les informations par
     les vôtres.

    #+BEGIN_SRC  
       #+TITLE: [NOM DU CHAPITRE]
       #+SUBTITLE: [NOM DU COURS]
       #+OPTIONS: toc:t author:nil
       #+LaTeX_HEADER: \author{[PRENOM NOM] \\ N. Etudiant : [NUMERO]}
       #+SETUPFILE: ~/.emacs.d/ied-latex-standard.org

       \newpage

        * Exercice X
        ** Enoncé
        :PROPERTIES:
        :UNNUMBERED: t
        :END:

        ** Réponse
        :PROPERTIES:
        :UNNUMBERED: t
        :END:
   #+END_SRC

      *Méthode 2*

      Utiliser la commande suivante pour télécharger un fichier
      échantillon du dépôt github.
   
      #+begin_src shell
      curl -o ~/modele_devoir.org https://raw.githubusercontent.com/AreTaro/iedmacs/main/modele_devoir.org 
      #+end_src

      Ouvrir le fichier téléchargé avec la commande ~Ctrl-x Ctrl-f~.

2. Rédiger votre dévoir
   Utiliser la synthaxe orgmode pour écrire votre texte. Pour plus de
   détails sur la syntax voir le dépôt en anglais [[https://github.com/fniessen/refcard-org-mode][refcard-org-mode]].

   Vous pouvez également utiliser la synthaxe LaTex au sein de votre
   fichier ".org" en utilisant le raccourci ~Ctrl-c Ctrl-, l~ (Clavier
   azerty). Pour plus d'information sur la synthaxe LaTex voir le
   dépôt de [[https://github.com/amartos/TexIEDP8][amartos]].

3. Editer votre devoir au format PDF
   Une fois votre devoir ou document rédiger, il suffit d'utiliser le
   raccourci ~Ctrl-c Ctrl-e l p~, et votre fichier LaTex ainsi que le
   document PDF seront crée automatiquement.
  
** Guide de référence
   Description détaillée de chaque fonctionnalité du système,
   utilisation avancée et cas d'usage spécifiques.
** Notes de version
   Informations sur les changements importants.
*** nom des versions

1. Apollon Funky
2. Héra Cyber
3. Izanagi Groovy
4. Sarasvati Electro
5. Kuan Yin Techno
6. Dionysos Chic
7. Amaterasu Hyper
8. Vishnu Digital
9. Héphaïstos Psy
10. Benten Electro
11. Ares Techno
12. Inari Gigabyte
13. Parvati Turbo
14. Tsukuyomi Synthwave
15. Krishna Pixel
16. Athena Futuriste
17. Izanami Electro
18. Shiva Néon
19. Hestia Techno
20. Benzaiten Globo
   
** Carte de référence rapide
   Aide-mémoire des commandes et raccourcis clavier les plus utilisés.
** Gestion des paquets et extensions
* Documentation Système
** Principes du Système
Objectifs et philosophie de conceptions d'IDEmacs.
** Spécification / Conception
Lors de son démarrage, Emacs recherche d'abord un fichier nommé
"init.el" contenant du code Lisp qu'il exécute. Le fichier "init.el"
de l'IEDmacs est automatiquement généré par des blocs de code
spécifiques. Tout bloc de code commençant par une directive ~:tangle
"init.el"~ sera inclus dans le fichier "init.el" généré en utilisant la
commande ~Ctrl-c Ctrl-v Ctrl-t~.

Pour personnaliser votre configuration dans l'IEDmacs, vous pouvez
ajouter ou supprimer des blocs de code selon vos besoins.
   
   #+begin_src emacs-lisp :tangle "init.el"
     ;; Configuration de l'IEDmacs
     ;; Version: Apollon Funky 0.0.0
     ;; Supprimer le message de démarrage
     (setq inhibit-startup-message t)
     (menu-bar-mode -1)
     (tool-bar-mode -1)

     (setq initial-buffer-choice "~/.emacs.d/demarrageIed8")


      (setq display-time-day-and-date t) ;; Display the day and date
      (display-time-mode 1) ;; Enable time display in mode line

      (setq-default mode-line-format
                  (list
                  '(:eval
                      (propertize
                          (format-time-string
                          "  %-d/%-m %H:%M " (current-time))
                          'face 'shadow)) 
                  'default-directory
                  '(:eval (propertize (format-mode-line
                                          mode-line-buffer-identification)
                                      'face 'success))
                  '(:eval (if current-input-method
                              (propertize "⌨ " 'face 'warning)
                              ""))
                  ))
  
      ;; Define a function to only active setting when buffer is active
      (defun mode-line-window-selected-p ()
        "Return non-nil if we're updating the mode line for the selected window.
      This function is meant to be called in `:eval' mode line
      constructs to allow altering the look of the mode line depending
      on whether the mode line belongs to the currently selected window
      or not."
        (let ((window (selected-window)))
          (or (eq window (old-selected-window))
              (and (minibuffer-window-active-p (minibuffer-window))
                   (with-selected-window (minibuffer-window)
                     (eq window (minibuffer-selected-window)))))))
     
#+end_src

#+begin_src emacs-lisp :tangle "init.el"
     ;; Install MELPA package
     (require 'package)
     (setq package-enable-at-startup nil)
     (add-to-list 'package-archives
                  '("melpa" . "https://melpa.org/packages/"))
     (package-initialize)
     (package-refresh-contents)

     ;; PACKAGE NAME: Use-package
     ;; PURPOSE: to easily install package
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))

     ;; PACKAGE NAME: try
     ;; PURPOSE: to try package without install them
     (use-package try
       :ensure t)

     ;; PACKAGE NAME: whick-key
     ;; PURPOSE: to help to find next key, using a
     ;; menu at the bottom of the window
     (use-package which-key
       :ensure t
       :config (which-key-mode))
#+end_src

** Theme

#+begin_src emacs-lisp :tangle "init.el"
     ;; PACKAGE NAME: modus-themes
     ;; PURPOSE: theme by Protesilaos Stavrou
     (use-package modus-themes
       :ensure t)

     ;; ligth theme
     (load-theme 'modus-operandi-deuteranopia :no-confirm)

     (defun my-modus-themes-toggle ()
       "Toggle between `modus-operandi' and `modus-vivendi' themes.
     This uses `enable-theme' instead of the standard method of
     `load-theme'.  The technicalities are covered in the Modus themes
     manual."
       (interactive)
       (pcase (modus-themes--current-theme)
         ('modus-operandi-deuteranopia (progn (enable-theme 'modus-vivendi-tinted)
                                 (disable-theme 'modus-operandi-deuteranopia)))
         ('modus-vivendi-tinted (progn (enable-theme 'modus-operandi-deuteranopia)
                                 (disable-theme 'modus-vivendi-tinted)))
         (_ (error "No Modus theme is loaded; evaluate `modus-themes-load-themes' first"))))
#+end_src

** Ace window

#+begin_src emacs-lisp :tangle "init.el"
     ;; PACKAGE NAME: ace-window
     ;; PURPOSE: select a window more easily
     (global-set-key (kbd "M-o") 'ace-window)

     ;; PACKAGE NAME: swiper
     ;; PURPOSE: facilitate search in a document
     (use-package counsel
       :ensure t
       )

     (use-package swiper
       :ensure t
       :config
       (progn
         (ivy-mode)
         (setq ivy-use-virtual-buffers t)
         (setq enable-recursive-minibuffers t)
         ;; enable this if you want `swiper' to use it
         ;; (setq search-default-mode #'char-fold-to-regexp)
         (global-set-key "\C-s" 'swiper)
         (global-set-key (kbd "C-c C-r") 'ivy-resume)
         (global-set-key (kbd "<f6>") 'ivy-resume)
         (global-set-key (kbd "M-x") 'counsel-M-x)
         (global-set-key (kbd "C-x C-f") 'counsel-find-file)
         (global-set-key (kbd "<f1> f") 'counsel-describe-function)
         (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
         (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
         (global-set-key (kbd "<f1> l") 'counsel-find-library)
         (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
         (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
         (global-set-key (kbd "C-c g") 'counsel-git)
         (global-set-key (kbd "C-c j") 'counsel-git-grep)
         (global-set-key (kbd "C-c k") 'counsel-ag)
         (global-set-key (kbd "C-x l") 'counsel-locate)
         (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
         (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
         ))

     ;; ====== EVIL MODE SETTINGS ========
     ;; PACKAGE: evil
     ;; PURPOSE: using Vim shortcuts in emacs 
     (use-package evil
       :ensure t
       :init(setq evil-want-C-i-jump nil))

     (setq evil-default-state 'normal)
     (require 'evil)
     (evil-mode 0)

     ;; Biding keys
     ;; to change evil to emacs C-z
     (evil-set-leader 'normal (kbd "SPC"))
     (evil-define-key 'normal 'global (kbd "<leader>bs") 'save-buffer)
     (evil-define-key 'normal 'global (kbd "<leader>bb") 'switch-to-buffer)
     (evil-define-key 'normal 'global (kbd "<leader>ff") 'find-file)
     (evil-define-key 'normal 'global (kbd "<leader>ts") 'modus-themes-select) 
     (evil-define-key 'normal 'global (kbd "<leader>tt") 'my-modus-themes-toggle) 
     (evil-define-key 'normal 'global (kbd "<leader>1") 'delete-other-windows) 
     (evil-define-key 'normal 'global (kbd "<leader>ws") 'ace-select-window) 
     (evil-define-key 'normal 'global (kbd "<leader>wd") 'ace-delete-window) 
     (evil-define-key 'normal 'global (kbd "<leader>w1") 'ace-delete-other-windows) 
     (evil-define-key 'normal 'global (kbd "<leader>bk") 'save-buffers-kill-terminal)
     (evil-define-key 'normal 'global (kbd "<leader>w-") 'split-window-below) 
     (evil-define-key 'normal 'global (kbd "<leader>w/") 'split-window-right) 
     (evil-define-key 'normal 'global (kbd "<leader>bn") 'next-buffer) 
     (evil-define-key 'normal 'global (kbd "<leader>bp") 'previous-buffer)
     (evil-define-key 'normal 'global (kbd "<leader>fc") 'counsel-find-file)
     (evil-define-key 'normal 'global (kbd "<leader>bl") 'list-buffers)
     (evil-define-key 'normal 'global (kbd "<leader>tl") 'load-themes)
     (evil-define-key 'normal 'global (kbd "<leader>ss") 'swiper)
     (evil-define-key 'normal 'global (kbd "<leader>l") 'org-insert-link)

     ;; ====== EVIL MODE SETTINGS END ========

     ;; ido to easy find the names of files, docs, when searching
     (setq indo-enable-flex-matching t)
     (setq ido-everywhere t)
     (ido-mode 1)

     ;; better visualization of buffer-list
     (defalias 'list-buffers 'ibuffer)
     ;;(defalias 'list-buffers 'ibuffer-other-window)

     ;; to set up the directory file, when opening new file
     (setq default-directory "~/")

     ;; to display line number
     (global-display-line-numbers-mode)
     ;;(add-hook 'prog-mode-hook 'display-line-numbers-mode)

     ;; Org mode stuff
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook 'org-bullets-mode))

     ;; for converting org to pdf
     ;; defined org-plain-latex used in latex-standard.org
     (with-eval-after-load 'ox-latex
       (add-to-list 'org-latex-classes
                    '("org-plain-latex"
                      "\\documentclass{article}
                [NO-DEFAULT-PACKAGES]
                [PACKAGES]
                [EXTRA]"
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

     ;;==== AUTOMATICALLY ADD BY EMACS ======

     (custom-set-variables
      ;; custom-set-variables was added by Custom.
      ;; If you edit it by hand, you could mess it up, so be careful.
      ;; Your init file should contain only one such instance.
      ;; If there is more than one, they won't work right.
      '(custom-safe-themes
        '("c7a926ad0e1ca4272c90fce2e1ffa7760494083356f6bb6d72481b879afce1f2" "0f76f9e0af168197f4798aba5c5ef18e07c926f4e7676b95f2a13771355ce850" default))
      '(package-selected-packages '(which-key try use-package)))
     (custom-set-faces
      ;; custom-set-faces was added by Custom.
      ;; If you edit it by hand, you could mess it up, so be careful.
      ;; Your init file should contain only one such instance.
      ;; If there is more than one, they won't work right.
      '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))
   #+end_src

* Recommandations
* Sources
